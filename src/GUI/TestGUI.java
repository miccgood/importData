/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import org.apache.poi.xssf.eventusermodel.XSSFReader;
//import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import Entity.Enum.CategoryData;
import Export.TextFile;
import Import.ProgrammerMode;
import Import.ImportCapital;
import Import.ImportData;
import Import.ImportDonation;
import Import.ImportDonationtt;
import Import.ImportGuarantee;
import Import.Utils.XSSFConvert;
import com.ibm.db2.jcc.b.ab;
import java.awt.Color;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.util.List;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.PersistenceException;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.filechooser.FileFilter;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import jxl.read.biff.BiffException;
import org.apache.poi.POIXMLException;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.openxml4j.exceptions.OpenXML4JException;
import org.apache.poi.openxml4j.opc.OPCPackage;
import org.apache.poi.openxml4j.opc.PackagePart;
import org.apache.poi.openxml4j.opc.PackageRelationship;
import org.apache.poi.openxml4j.opc.PackageRelationshipCollection;
import org.apache.poi.openxml4j.opc.PackageRelationshipTypes;
import org.apache.poi.openxml4j.opc.PackagingURIHelper;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.xssf.eventusermodel.ReadOnlySharedStringsTable;
import org.apache.poi.xssf.eventusermodel.XSSFSheetXMLHandler;
import org.apache.poi.xssf.eventusermodel.XSSFSheetXMLHandler.SheetContentsHandler;
//import org.apache.poi.xssf.eventusermodel.XSSFSheetXMLHandler;
//import org.apache.poi.xssf.eventusermodel.XSSFSheetXMLHandler.SheetContentsHandler;
import org.apache.poi.xssf.model.StylesTable;
//import org.apache.poi.xssf.streaming.SXSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.eclipse.persistence.tools.file.FileUtil;
import org.xml.sax.ContentHandler;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.XMLReaderFactory;
import service.DAO;
import service.ExcelWorkSheetHandler;
import service.ReadExcelFile;

/**
 *
 * @author momo-pc
 */
public class TestGUI extends javax.swing.JFrame {
    private static JCheckBox isEnableLog;
    private static JCheckBox isEnableLogError;

    /**
     * Creates new form TestGUI
     */

   protected PackageRelationshipCollection relationships;
//    private Entity enetityManager;
    private File file;
    private String selected;
    private XSSFWorkbook workbook;
    private String modeSelected;
    private static JTextArea templog;
    private static JProgressBar tempProgressBar;
    private static JTextField tempHost;
    private static JTextField tempDatabase;
    private static JTextField tempUsername;
    private static JTextField tempPassword;
//    private static JFrame tempPopup;
    private ImportData importData = null;
    private static String fileName;
    private Thread processThread ;
    private String errorFileName;
    private static TestGUI tempThis;
    public TestGUI() {
        initComponents();
        afterInitComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jFrame1 = new javax.swing.JFrame();
        jScrollPane1 = new javax.swing.JScrollPane();
        log = new javax.swing.JTextArea();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        browseBtn = new javax.swing.JButton();
        fileNameComboBox = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        sheetName = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        modeComboBox = new javax.swing.JComboBox();
        processBtn = new javax.swing.JButton();
        stopBtn = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        clearBtn = new javax.swing.JButton();
        enableLog = new javax.swing.JCheckBox();
        enableLogError = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        database = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        username = new javax.swing.JTextField();
        password = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        testConnection = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        host = new javax.swing.JTextField();
        resultTestConnection = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        Query = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        clearBtn1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        sqlInput = new javax.swing.JTextArea();
        progressBar = new javax.swing.JProgressBar();

        jMenu1.setText("jMenu1");

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CDGS Import Data");
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        log.setEditable(false);
        log.setColumns(20);
        log.setRows(5);
        log.setWrapStyleWord(true);
        jScrollPane1.setViewportView(log);

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        jTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });
        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel2.setAutoscrolls(true);

        browseBtn.setText("Browse");
        browseBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                browseBtnMouseClicked(evt);
            }
        });
        browseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseBtnActionPerformed(evt);
            }
        });

        fileNameComboBox.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        fileNameComboBox.setEnabled(false);
        fileNameComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileNameComboBoxActionPerformed(evt);
            }
        });

        jLabel7.setText("ชื่อ Sheet");

        sheetName.setEnabled(false);
        sheetName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sheetNameActionPerformed(evt);
            }
        });

        jLabel8.setText("ประเภทข้อมูล");

        modeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "กองทุน", "ผู้บริจาค", "หลักประกัน", "ProgrammerMode" }));
        modeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modeComboBoxActionPerformed(evt);
            }
        });

        processBtn.setText("ประมวลผล");
        processBtn.setEnabled(false);
        processBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                processBtnMouseClicked(evt);
            }
        });
        processBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processBtnActionPerformed(evt);
            }
        });

        stopBtn.setText("หยุด");
        stopBtn.setEnabled(false);
        stopBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stopBtnMouseClicked(evt);
            }
        });
        stopBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopBtnActionPerformed(evt);
            }
        });

        jLabel9.setText("ชื่อไฟล์ ");

        clearBtn.setText("Clear");
        clearBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearBtnMouseClicked(evt);
            }
        });

        enableLog.setSelected(true);
        enableLog.setText("Log");

        enableLogError.setSelected(true);
        enableLogError.setLabel("LogError");
        enableLogError.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enableLogErrorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel7))
                        .addGap(23, 23, 23)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fileNameComboBox)
                            .addComponent(sheetName, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(modeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 596, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(enableLog)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(enableLogError)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(251, 251, 251)
                .addComponent(processBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stopBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(enableLog)
                    .addComponent(enableLogError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseBtn)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sheetName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(processBtn)
                    .addComponent(stopBtn)
                    .addComponent(clearBtn))
                .addGap(12, 12, 12))
        );

        jTabbedPane1.addTab("นำเข้าข้อมูล", jPanel2);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel10.setText("Database");

        database.setText("TRC_ERP");

        jLabel4.setText("Username");

        username.setText("db2inst1");

        password.setText("@Trc#9681");

        jLabel5.setText("Password");

        testConnection.setText("Test Connection");
        testConnection.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                testConnectionMouseClicked(evt);
            }
        });

        jLabel6.setText("Host");

        host.setText("192.168.8.10");

        resultTestConnection.setText("  ");

        jLabel1.setText("ตรวจสอบข้อมูล");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(host)
                    .addComponent(username, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                    .addComponent(testConnection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(resultTestConnection, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel5))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel10)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(database)
                            .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(335, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(database, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel6)
                    .addComponent(host, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(testConnection)
                    .addComponent(jLabel1)
                    .addComponent(resultTestConnection, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(69, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("การเชื่อมต่อ", jPanel3);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        Query.setText("Query");
        Query.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                QueryMouseClicked(evt);
            }
        });

        clearBtn1.setText("Clear");

        sqlInput.setColumns(20);
        sqlInput.setRows(5);
        sqlInput.setEnabled(false);
        jScrollPane2.setViewportView(sqlInput);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Query, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearBtn1)
                .addContainerGap())
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 842, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Query)
                        .addComponent(clearBtn1)))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("SQL Test", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(jTabbedPane1))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleDescription("CDGS Import Data");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void testConnectionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_testConnectionMouseClicked
        progressBar.setValue(0);
        progressBar.setStringPainted(false);
        new Thread(){
            @Override
            public void run() {
                progressBar.setIndeterminate(true);
                resultTestConnection.setText("");
                try {
                    DAO testDao = new DAO();
                    try {
                        testDao.testQuery();
                        resultTestConnection.setText("เชื่อมต่อฐานข้อมูลสำเร็จ");
                        resultTestConnection.setForeground(Color.blue);
                    } catch (PersistenceException e) {
                        resultTestConnection.setText("เชื่อมต่อไม่สำเร็จ");
                        resultTestConnection.setForeground(Color.red);
                    }finally {
                        testDao.closeConnection();
                        progressBar.setIndeterminate(false);
                    }
                } catch (PersistenceException e) {
                    String message = e.getMessage();
                    if(message.contains("Error Code: -4214")){
                        resultTestConnection.setText("User/Pass ผิด");
                    }else{
                        resultTestConnection.setText("เชื่อมต่อไม่สำเร็จ");
                    }
                    resultTestConnection.setForeground(Color.red);
                } finally {
                    progressBar.setIndeterminate(false);
                }

            }
        }.start();
    }//GEN-LAST:event_testConnectionMouseClicked

    private void enableLogErrorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableLogErrorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_enableLogErrorActionPerformed

    private void clearBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearBtnMouseClicked
        log.setText(null);
        progressBar.setValue(0);
        progressBar.setStringPainted(false);
    }//GEN-LAST:event_clearBtnMouseClicked

    private void stopBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_stopBtnActionPerformed

    private void stopBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stopBtnMouseClicked
        if(!stopBtn.isEnabled())return;
        if(Thread.State.RUNNABLE.equals(processThread.getState())){
            importData.setStop(true);
            setModeProcess(false);
            //            try {
                //                Thread.sleep(100);
                //            } catch (InterruptedException ex) {
                //                Logger.getLogger(TestGUI.class.getName()).log(Level.SEVERE, null, ex);
                //            }
            outln("หยุดการทำงาน");
            progressBar.setValue(0);
            progressBar.setStringPainted(false);
        }
    }//GEN-LAST:event_stopBtnMouseClicked

    private void processBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_processBtnActionPerformed

    private void processBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_processBtnMouseClicked

        if(!processBtn.isEnabled())return;
        processThread = new Thread(){
            @Override
            public void run() {
                progressBar.setValue(0);
                progressBar.setStringPainted(true);

                setModeProcess(true);
                CategoryData categoryData = CategoryData.valueOf(String.valueOf(modeComboBox.getSelectedItem()));
                String modeSelected = categoryData.getType();
                try {
                    switch (modeSelected){

                        case "Capital" : {
                            importData = new ImportCapital();
                            break ;
                        }
                        case "Donation" : {
                            importData = new ImportDonation();
                            break ;
                        }
                        case "Donation2" : {
                            importData = new ImportDonationtt();
                            break ;
                        }
                        case "Guarantee" : {
                            importData = new ImportGuarantee();
                            break ;
                        }
                        case "ProgrammerMode" : {
                            importData = new ProgrammerMode();
                            break ;
                        }
                        default: {
                            outln("Error");
                        }
                    }

                    List<StringBuffer> validateErrorList = importData.processData(workbook, selected);
                    if(importData.getStop()){
                        processThread = null;
                    }else{
                        errorFileName = TextFile.write(file, validateErrorList);
                        setModeProcess(false);

                        if(JOptionPane.showConfirmDialog(getThis(),"ต้องการเปิดไฟล์ผลการประมวลผลหรือไม่ ?") == 0){
                            openFile(errorFileName);
                        }
                    }

                } catch (PersistenceException e) {
                    e.printStackTrace();
                    log.append("เกิดข้อผิดพลาดการเชื่อมต่อฐานข้อมูล\n");
                    log.append(e.getMessage());
                    setModeProcess(false);
                } catch (Exception ex){
                    ex.printStackTrace();
                    log.append("เกิดข้อผิดพลาด\n");
                    setModeProcess(false);
                } finally {

                }
            }
        };
        processThread.start();
    }//GEN-LAST:event_processBtnMouseClicked

    private void modeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modeComboBoxActionPerformed
        if("comboBoxChanged".equals(evt.getActionCommand())){
            String newSelected = String.valueOf(modeComboBox.getSelectedItem());
            if(!newSelected.equals(selected)){
                this.modeSelected = String.valueOf(modeComboBox.getSelectedItem());
                //                outln("เลือก Mode " + modeSelected);
            }

        }
    }//GEN-LAST:event_modeComboBoxActionPerformed

    private void sheetNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sheetNameActionPerformed
        if("comboBoxChanged".equals(evt.getActionCommand())){
            String newSelected = String.valueOf(sheetName.getSelectedItem());
            if(!newSelected.equals(selected)){
                selected = String.valueOf(sheetName.getSelectedItem());
                XSSFSheet sheet = workbook.getSheet(selected);
                int lastRowNum = sheet.getLastRowNum();
                log.setText(selected + " มีข้อมูลทั้งหมด " + lastRowNum + " แถว\n");
                setModeProcess(false);
            }

        }
    }//GEN-LAST:event_sheetNameActionPerformed

    private void fileNameComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileNameComboBoxActionPerformed
        if("comboBoxChanged".equals(evt.getActionCommand())){
            String newSelected = fileNameComboBox.getSelectedText();
            if(!newSelected.equals(selected)){
                selected = fileNameComboBox.getSelectedText();
                XSSFSheet sheet = workbook.getSheet(selected);
                int lastRowNum = sheet.getLastRowNum();
                log.setText(selected + " มีข้อมูลทั้งหมด " + lastRowNum + " แถว\n");
                setModeProcess(false);
            }

        }
    }//GEN-LAST:event_fileNameComboBoxActionPerformed

    private void browseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_browseBtnActionPerformed

    private void browseBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_browseBtnMouseClicked
        JFileChooser fileChooser = new JFileChooser();
        //        fileChooser.setCurrentDirectory(new java.io.File("."));
        fileChooser.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                return f.isDirectory() || f.getName().endsWith(".xls") || f.getName().endsWith(".xlsx") || f.getName().endsWith(".xlsm");
            }

            @Override
            public String getDescription() {
                return "Excel File";
            }
        });
        fileChooser.setAcceptAllFileFilterUsed(true);
        fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        fileChooser.setDialogTitle("Chooser Excel File ...");

        if (fileChooser.showOpenDialog(fileNameComboBox) == JFileChooser.APPROVE_OPTION) {
            diableForm();
            file = fileChooser.getSelectedFile();
            TestGUI.fileName = file.getName();
            fileNameComboBox.setText(fileName);
            //            try {
                //                FileInputStream fileInput = new FileInputStream(file);
                //            } catch (FileNotFoundException ex) {
                //                Logger.getLogger(TestGUI.class.getName()).log(Level.SEVERE, null, ex);
                //            }
            getSheetName();
        }
    }//GEN-LAST:event_browseBtnMouseClicked

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked

    }//GEN-LAST:event_jTabbedPane1MouseClicked

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        if(jTabbedPane1.getSelectedIndex() == 2){
            log.setText("ปิดปรับรุง");
            progressBar.setValue(0);
            progressBar.setStringPainted(false);
            log.setEditable(false);
        }
        log.setText(null);
        progressBar.setValue(0);
        progressBar.setStringPainted(false);
        log.setEditable(false);
    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void QueryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_QueryMouseClicked
        progressBar.setValue(0);
        progressBar.setStringPainted(false);
        new Thread(){
            @Override
            public void run() {
                progressBar.setIndeterminate(true);
                resultTestConnection.setText("");
                try {
                    DAO testDao = new DAO();
                    try {
                        String sql = sqlInput.getText();
                        List list = testDao.testQuery(sql);
                        resultTestConnection.setText("ค้นหาข้อมูลสำเร็จ");
                        resultTestConnection.setForeground(Color.blue);
                    } catch (PersistenceException e) {
                        resultTestConnection.setText("ค้นหาข้อมูลไม่สำเร็จ");
                        resultTestConnection.setForeground(Color.red);
                    }finally {
                        testDao.closeConnection();
                        progressBar.setIndeterminate(false);
                    }
                } catch (PersistenceException e) {
                    String message = e.getMessage();
                    if(message.contains("Error Code: -4214")){
                        resultTestConnection.setText("User/Pass ผิด");
                    }else{
                        resultTestConnection.setText("เชื่อมต่อไม่สำเร็จ");
                    }
                    resultTestConnection.setForeground(Color.red);
                } finally {
                    progressBar.setIndeterminate(false);
                }

            }
        }.start();
    }//GEN-LAST:event_QueryMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new TestGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Query;
    private javax.swing.JButton browseBtn;
    private javax.swing.JButton clearBtn;
    private javax.swing.JButton clearBtn1;
    private javax.swing.JTextField database;
    private javax.swing.JCheckBox enableLog;
    private javax.swing.JCheckBox enableLogError;
    private javax.swing.JTextField fileNameComboBox;
    private javax.swing.JTextField host;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea log;
    private javax.swing.JComboBox modeComboBox;
    private javax.swing.JTextField password;
    private javax.swing.JButton processBtn;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel resultTestConnection;
    private javax.swing.JComboBox sheetName;
    private javax.swing.JTextArea sqlInput;
    private javax.swing.JButton stopBtn;
    private javax.swing.JButton testConnection;
    private javax.swing.JTextField username;
    // End of variables declaration//GEN-END:variables

    private void afterInitComponents() {
        TestGUI.tempProgressBar = progressBar;
        TestGUI.templog = log;
        TestGUI.tempHost = host;
        TestGUI.tempDatabase = database;
        TestGUI.tempUsername = username;
        TestGUI.tempPassword = password;
        TestGUI.tempThis = this;
        TestGUI.isEnableLog = enableLog;
        TestGUI.isEnableLogError = enableLogError;
        
    }

    
    
//    public void readXSSFWorkBook(FileInputStream fileInput) throws Exception {
//        byte buffer[] = new byte[8];
//        int count = 0;
//        long e = 0;
//        
//        FileOutputStream fileOutput = new FileOutputStream(fileName);
//        while (true) {
//            int i = fileInput.read(buffer);
//            fileOutput.write(buffer);
//            
//            System.out.println(i);
//            
//        }
//        new FileInputStream(new File(fileOutput))
//  }
    
    public static void copy(InputStream input, OutputStream output, int bufferSize) throws IOException {
        byte[] buf = new byte[bufferSize];
        int bytesRead = input.read(buf);
        while (bytesRead != -1) {
            output.write(buf, 0, bytesRead);
            bytesRead = input.read(buf);
        }
        output.flush();
    }
    
    
//    public void ensureRelationships() {
//        if (this.relationships == null) {
//            this.relationships = new PackageRelationshipCollection(null);
//        }
//    }
//    public PackagePart getPart(PackageRelationship partRel) {
//        PackagePart retPart = null;
//        ensureRelationships();
//        for (PackageRelationship rel : this.relationships) {
//            if (rel.getRelationshipType().equals(partRel.getRelationshipType())) {
//                try {
//                    retPart = getPart(PackagingURIHelper.createPartName(rel.getTargetURI()));
//                } catch (InvalidFormatException e) {
//                        continue;
//                }
//                break;
//            }
//        }
//        return retPart;
//    }
    
    
    public void parseExcel(File file) throws IOException {
        
        OPCPackage pkg = null;
        try {
            pkg = OPCPackage.open(file.getAbsolutePath());
        } catch (InvalidFormatException ex) {
            Logger.getLogger(TestGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        FileInputStream fileInputStream = new FileInputStream(file);
        try {
            jxl.Workbook jxlWorkbook = jxl.Workbook.getWorkbook(file);
            jxl.Sheet[] jxlSheet = jxlWorkbook.getSheets();
//            jxlSheet.
        } catch (BiffException ex) {
            ex.printStackTrace();
            Logger.getLogger(TestGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        XSSFWorkbook fWorkbookModifire = new XSSFWorkbook(file.getAbsolutePath());
        
        OPCPackage container;
        try {
            container = OPCPackage.open(file.getAbsolutePath());

            ReadOnlySharedStringsTable strings = new ReadOnlySharedStringsTable(container);
            XSSFReader xssfReader = new XSSFReader(container);
            StylesTable styles = xssfReader.getStylesTable();
            XSSFReader.SheetIterator iter = (XSSFReader.SheetIterator) xssfReader.getSheetsData();
            while (iter.hasNext()) {
                InputStream stream = iter.next();
                processSheet(styles, strings, stream);
                stream.close();
            }
            
        } catch (InvalidFormatException e) {
            e.printStackTrace();
        } catch (SAXException e) {
            e.printStackTrace();
        } catch (OpenXML4JException e) {
            e.printStackTrace();
        }

}

protected void processSheet(StylesTable styles, ReadOnlySharedStringsTable strings, InputStream sheetInputStream) throws IOException, SAXException {

        InputSource sheetSource = new InputSource(sheetInputStream);
        SAXParserFactory saxFactory = SAXParserFactory.newInstance();
        try {
            SAXParser saxParser = saxFactory.newSAXParser();
            XMLReader sheetParser = saxParser.getXMLReader();
            ContentHandler handler = new XSSFSheetXMLHandler(styles, strings, new SheetContentsHandler() {

            @Override
                public void startRow(int rowNum) {
                }
                @Override
                public void endRow() {
                }
                @Override
                public void cell(String cellReference, String formattedValue) {
                }
                @Override
                public void headerFooter(String text, boolean isHeader, String tagName) {

                }

            }, 
            false//means result instead of formula
            );
            sheetParser.setContentHandler(handler);
            sheetParser.parse(sheetSource);
        } catch (ParserConfigurationException e) {
            throw new RuntimeException("SAX parser appears to be broken - " + e.getMessage());
        }
}
    
    
    private void readXSSFWorkBook(FileInputStream fileInputStream ) throws IOException{
        try {  
            
            workbook = new XSSFWorkbook(fileInputStream);
        } catch (POIXMLException e) {
           HSSFWorkbook hssfWorkbook = new HSSFWorkbook(fileInputStream);
           workbook = XSSFConvert.convertWorkbookHSSFToXSSF(hssfWorkbook);
        }
    }
    
    private void getSheetName() {
        FileInputStream fileInput ;
        try {
            fileInput = new FileInputStream(file);
            this.readXSSFWorkBook(fileInput);
        } catch (FileNotFoundException e) {
            outln("ไม่พบไฟล์ปลายทาง");
            return;
        } catch (IOException ex) {
            outln("เกิดข้อผิดพลาดขณะนำเข้าไฟล์ กรุณาตรวจสอบความสมบูรณ์ของไฟล์ หรือบันทึกไฟล์เป็นนามสกุล .xlsx");
            return;
        } catch (Exception ex) {
            Logger.getLogger(TestGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
            
        List<String> list = new ArrayList<>();

        int count = workbook.getNumberOfSheets();
                //</editor-fold>
        for (int i = 0; i < count; i++) {
            XSSFSheet sheet = workbook.getSheetAt(i);
            list.add(sheet.getSheetName());

        }
        if(list.size() > 0){
            String[] modelName = list.toArray(new String[list.size()]);

            sheetName.setModel(new javax.swing.DefaultComboBoxModel(modelName));

            selected = String.valueOf(sheetName.getSelectedItem());

            XSSFSheet sheet = workbook.getSheet(selected);
            int lastRowNum = sheet.getLastRowNum();
            log.setText(selected + " มีข้อมูลทั้งหมด " + lastRowNum + " แถว\n");

            sheetName.setEnabled(true);

            setModeProcess(false);
        }
            
       
    }
    
    private void outln(String output){
        log.append(output + "\n ");
    }

    private void diableForm() {
        processBtn.setEnabled(false);
        stopBtn.setEnabled(false);
        sheetName.setEnabled(false);
    }
    
    public static JTextArea getInstance(){
        return TestGUI.templog;
    }
    
    public static boolean IsEnableLog(){
        return TestGUI.isEnableLog.isSelected();
    }
    
    public static boolean IsEnableLogError(){
        return TestGUI.isEnableLogError.isSelected();
    }
    
    public static void refresh(){
        try{
            templog.setCaretPosition(templog.getText().length()+20);
        }catch(Exception e){
            templog.setCaretPosition(templog.getText().length());
        }
    }
    
    public static void setProcessBar(int percen){
        tempProgressBar.setValue(percen);
        tempProgressBar.setStringPainted(true);
    }
    
    public static String getFileName(){
        int length = fileName.length();
        if(length > 30){
            return TestGUI.fileName.substring(0, 30);
        }else{
            return TestGUI.fileName;
        }
        
    }
     
    private void setModeProcess(boolean process){
        //ถ้า mode process ปิดปุ่ม process
        processBtn.setEnabled(!process);
        stopBtn.setEnabled(process);
    }
    
    public static String getHost(){
        String host = tempHost.getText();
        return (host != null && !"".equals(host) ? host : "");
    }
    
    public static String getDatabase(){
        String database = tempDatabase.getText();
        return (database != null && !"".equals(database) ? database : "");
    }   
    
    public static String getUsername(){
        String username = tempUsername.getText();
        return (username != null && !"".equals(username) ? username : "");
    }
    
    public static String getPassword(){
        String password = tempPassword.getText();
        return (password != null && !"".equals(password) ? password : "");
    }
    
    public void openFile(String path){
        try {
            
            Process p = Runtime.getRuntime().exec("rundll32 SHELL32.DLL,ShellExec_RunDLL " + errorFileName);
        } catch (IOException ex) {
            Logger.getLogger(TextFile.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    
    private TestGUI getThis(){
        return TestGUI.tempThis;
    }
}
